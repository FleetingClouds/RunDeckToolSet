- id: net.fleetingclouds.install.magento.subs.division
  project: PrepareGenericVPS
  loglevel: INFO
  sequence:
    keepgoing: false
    strategy: node-first
    commands:
    - exec: echo " Start - - - "
    - exec: echo "sudo apt-get update"
    - exec: echo " Get dependencies ................. "
    - exec: sudo apt-get --force-yes -y install subversion
    - exec: echo "Create a virtual host for Magento"
    - script: |
        echo "Make a virtual host specification for @option.VirtualServerName@"
        cat > @option.VirtualServerName@ <<EOF
        <VirtualHost *:80>

          ServerName  @option.VirtualServerName@
          ServerAlias @option.VirtualServerName@

          DocumentRoot /var/magento/@option.VirtualServerName@/magento

          LogLevel warn
          ErrorLog  /var/magento/@option.VirtualServerName@/log/error.log
          CustomLog /var/magento/@option.VirtualServerName@/log/access.log combined

        </VirtualHost>
        EOF
        #
    - exec: echo "Obtain Magento . . . "
    - script: |
        #!/bin/bash
        #
        declare HttpUser=;
        declare BuildForDirectory=;
        declare HttpdServerType=@option.HttpdServerType@;
        declare HttpdServerUser=@option.HttpdServerUser@;
        declare HttpdVirtualHostsDir=@option.HttpdVirtualHostsDir@
        declare HttpdPublicDir=/var/magento/@option.VirtualServerName@
        declare HttpdLogDir=/var/magento/@option.VirtualServerName@/log
        declare HttpdWWWDir=/var/magento/www


            echo " * * * Building for ${HttpdServerType} * * * "

        if [  "$HttpdServerType" == "apache"  ]; then
            echo " * * * Building for Apache * * * "
            cat > vars.sh <<EOFA
                BuildForDirectory=/var/magento/@option.VirtualServerName@
                HttpUser=${HttpdServerUser}
        EOFA
        elif [  "$HttpdServerType" == "nginx"  ]; then
            echo " * * * Building for nginx * * * "
            cat > vars.sh <<EOFG
                BuildForDirectory=/srv/www/vhosts/meta.fleetingclouds.net/www/
                HttpUser=www-data
                HttpdVirtualHostsDir=/etc/nginx
        EOFG
        else
            echo "No such HTTPD server";
            exit 1;
        fi
        #
        echo " - - - - - - - - - - - Creating tmporary script file tmp.sh in directory ..."
        pwd
        #
        rm -f ./tmp.sh
        #
        source vars.sh
        echo "BuildForDirectory is ${BuildForDirectory}"
        #
        echo "Make a temporary script to perform Magento installation actions."
        cat > tmp.sh <<EOF
        #!/bin/bash
            #
            sudo mkdir -p ${BuildForDirectory}
            sudo mkdir -p ${HttpdPublicDir}
            sudo mkdir -p ${HttpdLogDir}
            sudo mkdir -p ${HttpdWWWDir}
            #
            echo " - - - Put the virtual host definition where the web server can find it ..."
            sudo mv @option.VirtualServerName@ ${HttpdVirtualHostsDir}/sites-available/
            pushd ${HttpdVirtualHostsDir}/sites-enabled/
            sudo ln -s ../sites-available/@option.VirtualServerName@ @option.VirtualServerName@
            popd
            #
            echo " - - - - - - - - - - - Step into ${BuildForDirectory}  >>>>>" 
            pushd ${BuildForDirectory}
            pwd
            #
            rm -fr ./@option.Branch@
            rm -fr ./magento
            #
            echo " - - - - - - - - - - - Getting version controlled source ..." 
            svn checkout @option.InstallerURL@/@option.Branch@
            #
            echo ">> - - - - - - - - - - - Make a symbolic link for it" 
            rm -f magento
            ln -s @option.Branch@ magento
            #
            echo ">> - - - - - - - - - - - Deliver it all to ${HttpUser}:${HttpUser}" 
            chown -R ${HttpUser}:${HttpUser} ./@option.Branch@
            chown -R ${HttpUser}:${HttpUser} ./magento
            chmod -R g+w ./@option.Branch@
            chmod -R g+w ./magento
            #
            echo " - - - - - - - - - - - Step into Installer PHP  >>>>>" 
            pushd magento/app/code/core/Mage/Install/Model/Installer
            echo ">> >> - - - - - - - - - - - Patch problem lines in Db.php" 
            if [  -e Db.php.bk   ]; then cp Db.php.bk Db.php; else cp Db.php Db.php.bk; fi
            sed -i -e '/check InnoDB support/,+6d' Db.php
            echo ">> >> - - - - - - - - - - - Step out of Installer PHP <<<<<" 
            popd
            #
            echo ">> - - - - - - - - - - - Step out of ${BuildForDirectory} <<<<<" 
            popd
            #
            echo " - - - - - - - - - - - Magento should now be available for installation."
            #
        EOF
        echo "Make it executable."
        #
        chmod a+x tmp.sh
        #
    - exec: sudo ./tmp.sh
    - exec: echo "Prepare to create a database for Magento"
    - script: |
        rm -f ./createDatabase.sql
        #
        echo "Make a temporary script to generate a database for Magento"
        cat > createDatabase.sql <<EOF
        show databases;
        drop database if exists @option.MagentoDataBase@;
        create database if not exists @option.MagentoDataBase@;
        grant all privileges on @option.MagentoDataBase@.* to @option.MySqlMagentoUser@@@option.MySqlServer@ identified by '@option.MySqlMagentoPwd@';
        flush privileges;
        EOF
        #
        echo "Ready to run it."
    - exec: mysql -u root -p${option.MySqlRootPwd} < createDatabase.sql
    - script: |
        rm -f ./getSampleData.sh
        #
        source vars.sh
        #
        echo "Make a temporary script to generate a sample database for Magento"
        cat > getSampleData.sh <<EOF
        #!/bin/bash
          #
          rm -f master
          echo "Download the sample data file into the default directory"
          wget -nc -c @option.RemoteRepository@ 2> /dev/null
          #
          echo "Decompress sample data"
          unzip master
          rm -f master
          rm -fr magento_sd
          mv FleetingClouds-MagentoSampleData* magento_sd
          rm -fr magento-sample-data
          mv magento_sd/v1.6.1.0 ./magento-sample-data
          rm -fr magento_sd
          #
          cp -Rf ./magento-sample-data/media/* ${BuildForDirectory}/magento/media
          chown -R ${HttpUser}:${HttpUser} ${BuildForDirectory}/magento/media
          #
          echo "Sample data is ready for loading"
        EOF
        echo "Make it executable."
        #
        chmod a+x getSampleData.sh
        #
    - exec: sudo ./getSampleData.sh
    - exec: echo "Run it into the sample database"
    - exec: mysql -u ${option.MySqlMagentoUser} -p${option.MySqlMagentoPwd} ${option.MagentoDataBase}  < ./magento-sample-data/${option.DatabaseSamplesFile}
    - exec: echo " - - - Magento sample data has been loaded."
    - exec: echo " = = = = = = = = = = = Done. Magento should now be available for installation."
  description: |
    
  name: MagentoSubsidiaryDivision
  uuid: net.fleetingclouds.install.magento.subs.division
  nodefilters:
    dispatch:
      threadcount: 1
      keepgoing: false
      excludePrecedence: true
      rankOrder: ascending
    include:
      name: curr.*
  group: net/fleetingclouds/install/magento/subs
  options:
    Branch:
      required: true
      description: The compressed file.
      value: '1.7'
    DatabaseSamplesFile:
      required: true
      description: A remote file that will restore a database.
      value: magento_sample_data_for_1.6.1.0.sql
    HttpdServerType:
      enforced: true
      required: true
      value: apache
      values:
      - apache
      - nginx
    HttpdServerUser:
      enforced: true
      required: true
      value: www-data
      values:
      - httpd:httpd
      - www-data
    HttpdVirtualHostsDir:
      required: true
      value: /etc/apache2
    InstallerURL:
      required: true
      description: the place to get it from
      value: http://svn.magentocommerce.com/source/branches
    MagentoDataBase:
      required: true
      description: The name of the MySQL database for Magento to use
      value: magentodb
    MySqlMagentoPwd:
      required: true
      value: okmmpl,,
    MySqlMagentoUser:
      required: true
      description: A MySQL username
      value: magentoadmin
    MySqlRootPwd:
      required: true
      description: The root password to use for MySql
      value: okmmpl,,
    MySqlServer:
      required: true
      description: The name of the MySQL host
      value: localhost
    RemoteRepository:
      required: true
      description: Where there is a database backup stored for later restore.
      value: https://github.com/FleetingClouds/MagentoSampleData/zipball/master
    VirtualServerName:
      required: true
      value: shop.warehouseman.com
    sudoPwdRunDeck:
      required: true
      description: RunDeck's password
      value: okmmpl,,
      secure: true
